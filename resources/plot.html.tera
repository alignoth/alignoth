<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <script>{{ vega | safe }}</script>
    <script>{{ vegalite | safe }}</script>
    <script>{{ vegaembed | safe }}</script>
    <script>{{ lzstring | safe }}</script>
    <style>
        #controls {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin: 1rem auto;
            max-width: 1000px;
            padding: 0 1rem;
            flex-wrap: nowrap;
        }

        #read-info {
            margin: 1rem auto;
            border-collapse: collapse;
            font-family: system-ui, sans-serif;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            min-width: 400px;
            border-radius: 8px;
            overflow: hidden;
        }

        #read-info th,
        #read-info td {
            padding: 0.75rem 1rem;
            text-align: left;
        }

        #read-info thead {
            background-color: #f5f7fa;
            font-weight: 600;
            color: #333;
        }

        #read-info tbody tr:nth-child(even) {
            background-color: #f9fafb;
        }

        #read-info tbody tr:hover {
            background-color: #eef2f7;
        }

        #read-info td {
            color: #444;
        }

        #read-info caption {
            caption-side: bottom;
            padding-top: 0.5rem;
            font-size: 0.9rem;
            color: #888;
        }

        #manual {
            font-family: system-ui, sans-serif;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            padding: 0.75rem 1rem;
            color: #333;
            flex: 0 0 45%;
        }

        #manual:hover {
            background-color: #eef2f7;
        }

        #manual summary {
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            outline: none;
            padding: 0.25rem 0;
        }

        #manual summary::-webkit-details-marker {
            display: none; /* Optional: remove the default marker */
        }

        #manual ul {
            margin-top: 0.75rem;
            padding-left: 1.25rem;
        }

        #manual li {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }

        #filter-container {
            flex: 0 0 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            #read-filter {
            padding: 0.5rem;
            font-size: 1rem;
            width: 300px;
            border-radius: 6px;
            border: 1px solid #ccc;
        }

        .flag-pill {
            position: relative;
            display: inline-block;
            padding: 3px 6px;
            background-color: #007acc;
            color: white;
            font-size: 0.75rem;
            border-radius: 12px;
            cursor: default;
        }

        .flag-pill:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

        .tooltip {
            visibility: hidden;
            opacity: 0;
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            white-space: nowrap;
            pointer-events: none;
            transition: opacity 0.1s ease-in-out;
            z-index: 9999;
        }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translateX(-50%);
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }

        #vis {
            overflow: auto;
            height: calc(100vh - 220px);
        }
    </style>
</head>
<body>
<div id="controls">
  <details id="manual">
    <summary>Plot manual</summary>
    <ul>
      <li><strong>Zoom:</strong> Use the mouse wheel to zoom in and out of the plot.</li>
      <li><strong>Pan:</strong> Click and drag to pan through the reads horizontally.</li>
      <li><strong>Highlight Reads:</strong> Click on a read to highlight it. Hold shift to select multiple. This will lower the opacity of all other reads, allowing better visibility of the selected read, especially when read mates overlap.</li>
    </ul>
  </details>

  <div id="filter-container">
    <input type="text" id="read-filter" placeholder="Filter by read name...">
  </div>
</div>
<table id="read-info" border="1">
  <thead>
    <tr><th>Name</th><th>Position</th><th>Flags</th></tr>
  </thead>
  <tbody>
    <tr><td colspan="3">Click a read</td></tr>
  </tbody>
</table>
<div id="vis" style="display: flex; justify-content: center;"></div>
<script>
    const compressed_spec = {{ spec | safe }};
    const spec = JSON.parse(LZString.decompressFromUTF16(compressed_spec));
    let fullData = [];
    vegaEmbed("#vis", spec, {mode: "vega-lite"}).then(({ view }) => {
        fullReads = view.data('reads');
        const el = document.getElementById("vis");

        const used_libs = document.createElement('a');
        used_libs.textContent = "Used libraries:";
        used_libs.setAttribute("style","font-size: 18px; border-top: 2px solid #000;");
        el.querySelector('.vega-actions').appendChild(used_libs);

        const vega_lite_link = document.createElement('a');
        vega_lite_link.setAttribute("href","https://github.com/vega/vega-lite");
        vega_lite_link.textContent = "vega-lite";
        el.querySelector('.vega-actions').appendChild(vega_lite_link);

        const vega_link = document.createElement('a');
        vega_link.setAttribute("href","https://github.com/vega/vega");
        vega_link.textContent = "vega";
        el.querySelector('.vega-actions').appendChild(vega_link);

        const vega_embed_link = document.createElement('a');
        vega_embed_link.setAttribute("href","https://github.com/vega/vega-embed");
        vega_embed_link.textContent = "vega-embed";
        el.querySelector('.vega-actions').appendChild(vega_embed_link);

        view.addSignalListener("rplc", (name, value) => {
            const tableBody = document.querySelector("#read-info tbody");

            if (!value?.vlPoint?.or?.length) {
                tableBody.innerHTML = `<tr><td colspan="3">Click a read</td></tr>`;
                return;
            }

            const selected = value.vlPoint.or;

            var reads = view.data("reads");
            reads = parseReadObjects(reads[0]["values"]);
            const selectedReads = reads.filter(r =>
                selected.some(s => s.name === r.name && s.position === r.position)
            );

            if (selectedReads.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="3">Click a read</td></tr>`;
                return;
            }

            tableBody.innerHTML = selectedReads.map(r => `
                <tr>
                    <td>${r.name}</td>
                    <td>${r.position}</td>
                    <td>${
                        decodeFlags(r.flags).map(pill =>
                            `<span class="flag-pill">
                                ${pill.label}
                                <span class="tooltip">${pill.bit}</span>
                            </span>`
                        ).join(" ")
                    }</td>
                </tr>
            `).join("");
        });

        const input = document.getElementById("read-filter");
        input.addEventListener("input", () => {
            const query = input.value.toLowerCase();
            const filtered = fullReads[0]["values"].split("ยง").filter(d => d.toLowerCase().split(" ")[5].includes(query)).join("ยง");
            view.change(
                'reads',
                vega
                    .changeset()
                    .remove(() => true) // Remove all current reads
                    .insert([{"values": filtered}]) // Insert only filtered reads
            ).run();
        });
    }).catch(console.warn);

    function decodeFlags(flag) {
        const meanings = {
            1: "read paired",
            2: "read mapped in proper pair",
            4: "read unmapped",
            8: "mate unmapped",
            16: "read reverse strand",
            32: "mate reverse strand",
            64: "first in pair",
            128: "second in pair",
            256: "not primary alignment",
            512: "read fails platform/vendor quality checks",
            1024: "PCR or optical duplicate",
            2048: "supplementary alignment"
        };
        const pills = [];

        Object.keys(meanings).forEach(bit => {
            if (flag & bit) {
                pills.push({
                    bit,
                    label: meanings[bit]
                });
            }
        });

        return pills;
    }

    function parseReadObjects(s) {
        return s.split('ยง').map(line => {
            const [aux, cigar, flags, mapq, mpos, name, position, row, raw_cigar] = line.split(' ');
            return { aux, cigar, flags, mapq, mpos, name, position: +position, row, raw_cigar };
        });
    }
</script>
</body>
</html>
