{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "resolve": {
    "scale": {
      "strokeWidth": "independent"
    }
  },
  "datasets": {
    "highlight": [],
    "reference": [],
    "reads": [],
    "coverage": []
  },
  "config": {
    "legend": {
      "layout": {
        "right": {
          "anchor": "start",
          "direction": "horizontal",
          "center": false,
          "margin": 10
        }
      }
    }
  },
  "vconcat": [
    {
      "data": {
        "name": "coverage"
      },
      "mark": {
        "type": "area",
        "interpolate": "step"
      },
      "transform": [
        {"calculate": "split(datum.m, '|')", "as": "m"},
        {"calculate": "split(datum.a, '$')", "as": "a_raw"},
        {"calculate": "split(datum.t, '$')", "as": "t_raw"},
        {"calculate": "split(datum.g, '$')", "as": "g_raw"},
        {"calculate": "split(datum.c, '$')", "as": "c_raw"},
        {"flatten": ["m"]},
        {
          "window": [
            {"op": "row_number", "as": "index"},
            {"op": "sum", "field": "m", "as": "m"}
          ],
          "frame": [null, 0]
        },
        {"calculate": "toNumber(datum.start) + datum.index", "as": "position"},
        {"flatten": ["a_raw"]},
        {"calculate": "(toNumber(split(datum.a_raw, '|')[0]) + toNumber(datum.start)) == datum.position ? toNumber(split(datum.a_raw, '|')[1]) : 0", "as": "a"},
        {"aggregate": [{"op": "sum", "field": "a", "as": "a"}, {"op": "max", "field": "m", "as": "m"}], "groupby": ["position", "t_raw", "g_raw", "c_raw", "start"]},
        {"flatten": ["t_raw"]},
        {"calculate": "(toNumber(split(datum.t_raw, '|')[0]) + toNumber(datum.start)) == datum.position ? toNumber(split(datum.t_raw, '|')[1]) : 0", "as": "t"},
        {"aggregate": [{"op": "sum", "field": "t", "as": "t"}, {"op": "max", "field": "a", "as": "a"}, {"op": "max", "field": "m", "as": "m"}], "groupby": ["position", "g_raw", "c_raw", "start"]},
        {"flatten": ["g_raw"]},
        {"calculate": "(toNumber(split(datum.g_raw, '|')[0]) + toNumber(datum.start)) == datum.position ? toNumber(split(datum.g_raw, '|')[1]) : 0", "as": "g"},
        {"aggregate": [{"op": "sum", "field": "g", "as": "g"}, {"op": "max", "field": "t", "as": "t"}, {"op": "max", "field": "a", "as": "a"}, {"op": "max", "field": "m", "as": "m"}], "groupby": ["position", "c_raw", "start"]},
        {"flatten": ["c_raw"]},
        {"calculate": "(toNumber(split(datum.c_raw, '|')[0]) + toNumber(datum.start)) == datum.position ? toNumber(split(datum.c_raw, '|')[1]) : 0", "as": "c"},
        {"aggregate": [{"op": "sum", "field": "c", "as": "c"}, {"op": "max", "field": "g", "as": "g"}, {"op": "max", "field": "t", "as": "t"}, {"op": "max", "field": "a", "as": "a"}, {"op": "max", "field": "m", "as": "m"}], "groupby": ["position"]},
        {"fold": ["m", "a", "c", "g", "t"], "as": ["base_type", "count"]},
        {"calculate": "{'m': 'm', 'a': 'A', 'c': 'C', 'g': 'G', 't': 'T'}[datum.base_type]", "as": "base_label"},
        {"calculate": "datum.base_label === 'm' ? 1 : 0", "as": "base_order"}
      ],
      "encoding": {
        "x": {
          "field": "position",
          "type": "quantitative",
          "axis": {
            "orient": "top",
            "title": "Position (1-based)",
            "labelAngle": 0
          },
          "scale": {
            "domain": {
              "param": "grid"
            },
            "nice": false
          }
        },
        "y": {
          "field": "count",
          "type": "quantitative",
          "stack": true,
          "axis": {
            "title": "Coverage"
          }
        },
        "color": {
          "field": "base_label",
          "type": "nominal",
          "scale": {
            "domain": ["A", "T", "G", "C", "m"],
            "range": ["#CADB69", "#7284A8", "#F28CC2", "#F2B671", "#BBBBBB"]
          },
          "legend": null
        },
        "order": {"field": "base_order"}
      },
      "height": 60
    },
    {
      "height": {
        "step": 4
      },
      "encoding": {
        "x": {
          "field": "start",
          "type": "quantitative",
          "axis": {
            "orient": "top",
            "labels": false,
            "ticks": false,
            "title": null
          },
          "scale": {
            "domain": []
          }
        },
        "x2": {
          "field": "end",
          "type": "quantitative"
        },
        "y": {
          "axis": {
            "titleAnchor": "start",
            "titleAlign": "right",
            "titleFontWeight": 400,
            "titlePadding": 28,
            "labels": false,
            "ticks": false,
            "domain": false
          },
          "field": "row",
          "type": "ordinal"
        },
        "yOffset": {
          "field": "v_offset",
          "type": "ordinal"
        }
      },
      "layer": [
        {
          "data": {
            "name": "highlight"
          },
          "mark": "rect",
          "encoding": {
            "color": {"field": "name", "title": "site"},
            "opacity": {
              "value": 0.20
            },
            "y2": {
              "value": 10000000
            }
          }
        },
        {
          "data": {
            "name": "reference"
          },
          "params": [
            {
              "name": "grid",
              "select": "interval",
              "bind": "scales"
            }
          ],
          "transform": [
            {
              "as": "base",
              "calculate": "split(datum.reference, '')"
            },
            {
              "as": "offset",
              "calculate": "sequence(datum.reference.length)"
            },
            {
              "flatten": ["base", "offset"]
            },
            {
              "as": "position",
              "calculate": "datum.start + datum.offset"
            },
            {
              "as": "start",
              "calculate": "datum.position + 0.5"
            },
            {
              "as": "end",
              "calculate": "datum.position + 1.5"
            },
            {
              "as": "position (1-based)",
              "calculate": "datum.position + 1"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "encoding": {
            "tooltip": [
              {
                "field": "base"
              },
              {
                "field": "position (1-based)"
              }
            ],
            "strokeWidth": {
              "value": 8
            },
            "color": {
              "field": "base",
              "legend": null,
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [
                  "#CADB69",
                  "#F2B671",
                  "#F28CC2",
                  "#7284A8",
                  "#A23E11",
                  "#BBBBBB",
                  "#CC1414",
                  "#047C0A"
                ]
              }
            }
          }
        },
        {
          "data": {
            "name": "reads"
          },
          "transform": [
            {
              "calculate": "split(datum.values, '\u00a7')",
              "as": "reads"
            },
            {
              "flatten": ["reads"]
            },
            {
              "calculate": "split(datum.reads, ' ')",
              "as": "fields"
            },
            {
              "calculate": "replace(datum.fields[0], '_', ' ')",
              "as": "aux"
            },
            {
              "calculate": "datum.fields[1]",
              "as": "cigar"
            },
            {
              "calculate": "toNumber(datum.fields[2])",
              "as": "flags"
            },
            {
              "calculate": "toNumber(datum.fields[3])",
              "as": "mapq"
            },
            {
              "calculate": "toNumber(datum.fields[4])",
              "as": "mpos"
            },
            {
              "calculate": "datum.fields[5]",
              "as": "name"
            },
            {
              "calculate": "toNumber(datum.fields[6])",
              "as": "position"
            },
            {
              "calculate": "datum.fields[7] === '.' ? null : toNumber(datum.fields[7])",
              "as": "row"
            },
            {
              "calculate": "datum.fields[8]",
              "as": "raw_cigar"
            },
            {
              "filter": "datum.mpos >= 0"
            },
            {
              "as": "start",
              "calculate": "if(datum.position < datum.mpos, datum.position + 0.5, datum.mpos + 0.5)"
            },
            {
              "as": "end",
              "calculate": "if(datum.position > datum.mpos, datum.position + 0.5, datum.mpos + 0.5)"
            },
            {
              "as": "v_offset",
              "calculate": "1"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "encoding": {
            "opacity": {
              "condition": {
                "param": "rplc",
                "value": 1
              },
              "value": 0.2
            },
            "strokeWidth": {
              "value": 1
            },
            "color": {
              "value": "#BBBBBB"
            }
          }
        },
        {
          "data": {
            "name": "reads"
          },
          "transform": [
            {
              "calculate": "split(datum.values, '\u00a7')",
              "as": "reads"
            },
            {
              "flatten": ["reads"]
            },
            {
              "calculate": "split(datum.reads, ' ')",
              "as": "fields"
            },
            {
              "calculate": "replace(datum.fields[0], '_', ' ')",
              "as": "aux"
            },
            {
              "calculate": "datum.fields[1]",
              "as": "cigar"
            },
            {
              "calculate": "toNumber(datum.fields[2])",
              "as": "flags"
            },
            {
              "calculate": "toNumber(datum.fields[3])",
              "as": "mapq"
            },
            {
              "calculate": "toNumber(datum.fields[4])",
              "as": "mpos"
            },
            {
              "calculate": "datum.fields[5]",
              "as": "name"
            },
            {
              "calculate": "toNumber(datum.fields[6])",
              "as": "position"
            },
            {
              "calculate": "datum.fields[7] === '.' ? null : toNumber(datum.fields[7])",
              "as": "row"
            },
            {
              "calculate": "datum.fields[8]",
              "as": "raw_cigar"
            },
            {
              "as": "cigars",
              "calculate": "split(datum.cigar, '|')"
            },
            {
              "as": "cigar_index",
              "calculate": "sequence(datum.cigars.length)"
            },
            {
              "flatten": ["cigars", "cigar_index"]
            },
            {
              "calculate": "if(substring(datum.cigars, 0, 1) == 'i', 'insertion', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == '=', 'match', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == 'd', 'deletion', substring(datum.cigars, 1, length(datum.cigars)))))",
              "as": "type"
            },
            {
              "calculate": "if(datum.type == 'match' || datum.type == 'deletion', parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1)), if(datum.type == 'insertion', 1, parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1))))",
              "as": "length"
            },
            {
              "stack": "length",
              "groupby": ["name", "cigar", "position"],
              "as": "offset"
            },
            {
              "as": "start",
              "calculate": "if(datum.type == 'insertion', datum.position + datum.offset + 1.4, datum.position + datum.offset + 0.4)"
            },
            {
              "as": "end",
              "calculate": "if(datum.type == 'insertion', datum.position + datum.offset + datum.length - 0.4, datum.position + datum.offset + datum.length + 0.6)"
            },
            {
              "as": "v_offset",
              "calculate": "if(datum.position < datum.mpos, 0, 2)"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "params": [
            {
              "name": "rplc",
              "select": {
                "type": "point",
                "toggle": "event.shiftKey",
                "fields": ["name", "position"]
              }
            }
          ],
          "encoding": {
            "opacity": {
              "condition": {
                "param": "rplc",
                "value": 1
              },
              "value": 0.2
            },
            "strokeWidth": {
              "field": "type",
              "scale": {
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [9, 9, 9, 9, 9, 9, 9, 12]
              },
              "legend": null
            },
            "color": {
              "field": "mapq",
              "type": "quantitative",
              "scale": {
                "domain": [0, 60],
                "range": [
                  "#910000",
                  "#c70002",
                  "#ff0000",
                  "#ff7500",
                  "#ffb200",
                  "#ffe921",
                  "#bbbbbb"
                ]
              }
            }
          }
        },
        {
          "data": {
            "name": "reads"
          },
          "transform": [
            {
              "calculate": "split(datum.values, '\u00a7')",
              "as": "reads"
            },
            {
              "flatten": ["reads"]
            },
            {
              "calculate": "split(datum.reads, ' ')",
              "as": "fields"
            },
            {
              "calculate": "replace(datum.fields[0], '_', ' ')",
              "as": "aux"
            },
            {
              "calculate": "datum.fields[1]",
              "as": "cigar"
            },
            {
              "calculate": "toNumber(datum.fields[2])",
              "as": "flags"
            },
            {
              "calculate": "toNumber(datum.fields[3])",
              "as": "mapq"
            },
            {
              "calculate": "toNumber(datum.fields[4])",
              "as": "mpos"
            },
            {
              "calculate": "datum.fields[5]",
              "as": "name"
            },
            {
              "calculate": "toNumber(datum.fields[6])",
              "as": "position"
            },
            {
              "calculate": "datum.fields[7] === '.' ? null : toNumber(datum.fields[7])",
              "as": "row"
            },
            {
              "calculate": "datum.fields[8]",
              "as": "raw_cigar"
            },
            {
              "calculate": "join([if ((datum.flags & 1) > 0, 'read paired, ', ''), if ((datum.flags & 2) > 0, 'read mapped in proper pair, ', ''),  if ((datum.flags & 4) > 0, 'read unmapped, ', ''), if ((datum.flags & 8) > 0, 'mate unmapped, ', ''), if ((datum.flags & 16) > 0, 'read reverse strand, ', ''), if ((datum.flags & 32) > 0, 'mate reverse strand, ', ''), if ((datum.flags & 64) > 0, 'first in pair, ', ''), if ((datum.flags & 128) > 0, 'second in pair, ', ''), if ((datum.flags & 256) > 0, 'not primary alignment, ', ''), if ((datum.flags & 512) > 0, 'read fails platform/vendor quality checks, ', ''), if ((datum.flags & 1024) > 0, 'read is PCR or optical duplicate, ', ''), if ((datum.flags & 2048) > 0, 'supplementary alignment, ', '')], '')",
              "as": "flags"
            },
            {
              "as": "cigars",
              "calculate": "split(datum.cigar, '|')"
            },
            {
              "as": "cigar_index",
              "calculate": "sequence(datum.cigars.length)"
            },
            {
              "flatten": ["cigars", "cigar_index"]
            },
            {
              "calculate": "if(substring(datum.cigars, 0, 1) == 'i', 'insertion', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == '=', 'match', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == 'd', 'deletion', substring(datum.cigars, 1, length(datum.cigars)))))",
              "as": "type"
            },
            {
              "calculate": "if(datum.type == 'match' || datum.type == 'deletion', parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1)), if(datum.type == 'insertion', 1, parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1))))",
              "as": "length"
            },
            {
              "stack": "length",
              "groupby": ["name", "cigar", "position"],
              "as": "offset"
            },
            {
              "as": "start",
              "calculate": "datum.position + datum.offset + 0.5"
            },
            {
              "as": "end",
              "calculate": "datum.position + datum.offset + datum.length + 0.5"
            },
            {
              "filter": "datum.type != 'deletion' && datum.type != 'insertion'"
            },
            {
              "as": "v_offset",
              "calculate": "if(datum.position < datum.mpos, 0, 2)"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "encoding": {
            "tooltip": [
              {
                "field": "name"
              },
              {
                "field": "type"
              },
              {
                "field": "mapq"
              },
              {
                "field": "flags"
              },
              {
                "field": "aux"
              },
              {
                "field": "raw_cigar"
              }
            ],
            "opacity": {
              "condition": {
                "param": "rplc",
                "value": 1
              },
              "value": 0.2
            },
            "strokeWidth": {
              "field": "type",
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [6, 6, 6, 6, 6, 6, 6, 9]
              },
              "legend": null
            },
            "color": {
              "field": "type",
              "legend": null,
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [
                  "#CADB69",
                  "#F2B671",
                  "#F28CC2",
                  "#7284A8",
                  "#A23E11",
                  "#BBBBBB",
                  "#CC1414",
                  "#047C0A"
                ]
              }
            }
          }
        },
        {
          "data": {
            "name": "reads"
          },
          "transform": [
            {
              "calculate": "split(datum.values, '\u00a7')",
              "as": "reads"
            },
            {
              "flatten": ["reads"]
            },
            {
              "calculate": "split(datum.reads, ' ')",
              "as": "fields"
            },
            {
              "calculate": "replace(datum.fields[0], '_', ' ')",
              "as": "aux"
            },
            {
              "calculate": "datum.fields[1]",
              "as": "cigar"
            },
            {
              "calculate": "toNumber(datum.fields[2])",
              "as": "flags"
            },
            {
              "calculate": "toNumber(datum.fields[3])",
              "as": "mapq"
            },
            {
              "calculate": "toNumber(datum.fields[4])",
              "as": "mpos"
            },
            {
              "calculate": "datum.fields[5]",
              "as": "name"
            },
            {
              "calculate": "toNumber(datum.fields[6])",
              "as": "position"
            },
            {
              "calculate": "datum.fields[7] === '.' ? null : toNumber(datum.fields[7])",
              "as": "row"
            },
            {
              "calculate": "datum.fields[8]",
              "as": "raw_cigar"
            },
            {
              "calculate": "join([if ((datum.flags & 1) > 0, 'read paired, ', ''), if ((datum.flags & 2) > 0, 'read mapped in proper pair, ', ''),  if ((datum.flags & 4) > 0, 'read unmapped, ', ''), if ((datum.flags & 8) > 0, 'mate unmapped, ', ''), if ((datum.flags & 16) > 0, 'read reverse strand, ', ''), if ((datum.flags & 32) > 0, 'mate reverse strand, ', ''), if ((datum.flags & 64) > 0, 'first in pair, ', ''), if ((datum.flags & 128) > 0, 'second in pair, ', ''), if ((datum.flags & 256) > 0, 'not primary alignment, ', ''), if ((datum.flags & 512) > 0, 'read fails platform/vendor quality checks, ', ''), if ((datum.flags & 1024) > 0, 'read is PCR or optical duplicate, ', ''), if ((datum.flags & 2048) > 0, 'supplementary alignment, ', '')], '')",
              "as": "flags"
            },
            {
              "as": "cigars",
              "calculate": "split(datum.cigar, '|')"
            },
            {
              "as": "cigar_index",
              "calculate": "sequence(datum.cigars.length)"
            },
            {
              "flatten": ["cigars", "cigar_index"]
            },
            {
              "calculate": "if(substring(datum.cigars, 0, 1) == 'i', 'insertion', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == '=', 'match', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == 'd', 'deletion', substring(datum.cigars, 1, length(datum.cigars)))))",
              "as": "type"
            },
            {
              "calculate": "if(datum.type == 'match' || datum.type == 'deletion', parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1)), if(datum.type == 'insertion', 1, parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1))))",
              "as": "length"
            },
            {
              "stack": "length",
              "groupby": ["name", "cigar", "position"],
              "as": "offset"
            },
            {
              "as": "start",
              "calculate": "datum.position + datum.offset + 0.5"
            },
            {
              "as": "end",
              "calculate": "datum.position + datum.offset + datum.length + 0.5"
            },
            {
              "as": "inserted bases",
              "calculate": "substring(datum.cigars, 1, length(datum.cigars))"
            },
            {
              "filter": "datum.type == 'insertion'"
            },
            {
              "as": "v_offset",
              "calculate": "if(datum.position < datum.mpos, 0, 2)"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "encoding": {
            "tooltip": [
              {
                "field": "name"
              },
              {
                "field": "type"
              },
              {
                "field": "mapq"
              },
              {
                "field": "flags"
              },
              {
                "field": "aux"
              },
              {
                "field": "inserted bases"
              },
              {
                "field": "raw_cigar"
              }
            ],
            "opacity": {
              "condition": {
                "param": "rplc",
                "value": 1
              },
              "value": 0.2
            },
            "strokeWidth": {
              "field": "type",
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [6, 6, 6, 6, 6, 6, 6, 9]
              },
              "legend": null
            },
            "color": {
              "field": "type",
              "legend": null,
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [
                  "#CADB69",
                  "#F2B671",
                  "#F28CC2",
                  "#7284A8",
                  "#A23E11",
                  "#BBBBBB",
                  "#CC1414",
                  "#047C0A"
                ]
              }
            }
          }
        },
        {
          "data": {
            "name": "reads"
          },
          "transform": [
            {
              "calculate": "split(datum.values, '\u00a7')",
              "as": "reads"
            },
            {
              "flatten": ["reads"]
            },
            {
              "calculate": "split(datum.reads, ' ')",
              "as": "fields"
            },
            {
              "calculate": "replace(datum.fields[0], '_', ' ')",
              "as": "aux"
            },
            {
              "calculate": "datum.fields[1]",
              "as": "cigar"
            },
            {
              "calculate": "toNumber(datum.fields[2])",
              "as": "flags"
            },
            {
              "calculate": "toNumber(datum.fields[3])",
              "as": "mapq"
            },
            {
              "calculate": "toNumber(datum.fields[4])",
              "as": "mpos"
            },
            {
              "calculate": "datum.fields[5]",
              "as": "name"
            },
            {
              "calculate": "toNumber(datum.fields[6])",
              "as": "position"
            },
            {
              "calculate": "datum.fields[7] === '.' ? null : toNumber(datum.fields[7])",
              "as": "row"
            },
            {
              "calculate": "datum.fields[8]",
              "as": "raw_cigar"
            },
            {
              "calculate": "join([if ((datum.flags & 1) > 0, 'read paired, ', ''), if ((datum.flags & 2) > 0, 'read mapped in proper pair, ', ''),  if ((datum.flags & 4) > 0, 'read unmapped, ', ''), if ((datum.flags & 8) > 0, 'mate unmapped, ', ''), if ((datum.flags & 16) > 0, 'read reverse strand, ', ''), if ((datum.flags & 32) > 0, 'mate reverse strand, ', ''), if ((datum.flags & 64) > 0, 'first in pair, ', ''), if ((datum.flags & 128) > 0, 'second in pair, ', ''), if ((datum.flags & 256) > 0, 'not primary alignment, ', ''), if ((datum.flags & 512) > 0, 'read fails platform/vendor quality checks, ', ''), if ((datum.flags & 1024) > 0, 'read is PCR or optical duplicate, ', ''), if ((datum.flags & 2048) > 0, 'supplementary alignment, ', '')], '')",
              "as": "flags"
            },
            {
              "as": "cigars",
              "calculate": "split(datum.cigar, '|')"
            },
            {
              "as": "cigar_index",
              "calculate": "sequence(datum.cigars.length)"
            },
            {
              "flatten": ["cigars", "cigar_index"]
            },
            {
              "calculate": "if(substring(datum.cigars, 0, 1) == 'i', 'insertion', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == '=', 'match', if(substring(datum.cigars, length(datum.cigars) - 1, length(datum.cigars)) == 'd', 'deletion', substring(datum.cigars, 1, length(datum.cigars)))))",
              "as": "type"
            },
            {
              "calculate": "if(datum.type == 'match' || datum.type == 'deletion', parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1)), if(datum.type == 'insertion', 1, parseInt(substring(datum.cigars, 0, length(datum.cigars) - 1))))",
              "as": "length"
            },
            {
              "stack": "length",
              "groupby": ["name", "cigar", "position"],
              "as": "offset"
            },
            {
              "as": "start",
              "calculate": "if(datum.type == 'insertion', datum.position + datum.offset + 1, datum.position + datum.offset + 0.5)"
            },
            {
              "as": "end",
              "calculate": "if(datum.type == 'insertion', datum.position + datum.offset + datum.length, datum.position + datum.offset + datum.length + 0.5)"
            },
            {
              "filter": "datum.type == 'deletion'"
            },
            {
              "as": "v_offset",
              "calculate": "if(datum.position < datum.mpos, 0, 2)"
            }
          ],
          "mark": {
            "type": "rule",
            "clip": true
          },
          "encoding": {
            "tooltip": [
              {
                "field": "name"
              },
              {
                "field": "type"
              },
              {
                "field": "mapq"
              },
              {
                "field": "flags"
              },
              {
                "field": "length"
              },
              {
                "field": "aux"
              },
              {
                "field": "raw_cigar"
              }
            ],
            "opacity": {
              "condition": {
                "param": "rplc",
                "value": 1
              },
              "value": 0.2
            },
            "strokeWidth": {
              "field": "type",
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [6, 6, 6, 6, 6, 6, 6, 9]
              },
              "legend": null
            },
            "color": {
              "field": "type",
              "legend": {
                "symbolSize": 75,
                "title": "symbol"
              },
              "scale": {
                "type": "ordinal",
                "domain": [
                  "A",
                  "C",
                  "G",
                  "T",
                  "N",
                  "match",
                  "deletion",
                  "insertion"
                ],
                "range": [
                  "#CADB69",
                  "#F2B671",
                  "#F28CC2",
                  "#7284A8",
                  "#A23E11",
                  "#BBBBBB",
                  "#CC1414",
                  "#047C0A"
                ]
              }
            }
          }
        }
      ]
    }
  ]
}
